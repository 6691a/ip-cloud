"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from os import environ
from pathlib import Path

from django.utils.translation import gettext_lazy as _
from google.oauth2 import service_account
from structlog import configure, contextvars, processors, stdlib
from yaml import safe_load

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

SETTING_FILE = environ.get("SETTING_FILE", "development.yaml")

with open(f"{BASE_DIR}/config/{SETTING_FILE}", "r") as file:
    cfg = safe_load(file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = cfg["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = cfg["DEBUG"]

ALLOWED_HOSTS = cfg["ALLOWED_HOSTS"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "modeltranslation",
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_structlog.middlewares.RequestMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = cfg["DATABASES"]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = cfg["LANGUAGE_CODE"]

TIME_ZONE = cfg["TIME_ZONE"]

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = cfg["CORS_ALLOWED_ORIGINS"]

LANGUAGES = [
    ("ko", _("Korean")),
    ("en", _("English")),
]
MODELTRANSLATION_LANGUAGES = ["ko", "en"]
MODELTRANSLATION_DEFAULT_LANGUAGE = "ko"
MODELTRANSLATION_FALLBACK_LANGUAGES = ["ko"]

CREDENTIALS = service_account.Credentials.from_service_account_file(
    BASE_DIR / cfg["GCP_CREDENTIAL"]
)
STORAGES = cfg["STORAGES"]
STORAGES["default"]["OPTIONS"]["credentials"] = CREDENTIALS
STORAGES["staticfiles"]["OPTIONS"]["credentials"] = CREDENTIALS

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": stdlib.ProcessorFormatter,
            "processor": processors.JSONRenderer(),
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "json",
            "filters": ["require_debug_true"],
        },
        "django": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "interval": 1,
            "backupCount": 15,
            "filename": BASE_DIR / "logs" / "log.log",
            "formatter": "json",
            "encoding": "utf-8",
            "filters": ["require_debug_false"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "django"],
            "level": "INFO",
        },
    },
}
configure(
    processors=[
        contextvars.merge_contextvars,
        stdlib.filter_by_level,
        processors.TimeStamper(fmt="iso"),
        stdlib.add_logger_name,
        stdlib.add_log_level,
        stdlib.PositionalArgumentsFormatter(),
        processors.StackInfoRenderer(),
        processors.format_exc_info,
        processors.UnicodeDecoder(),
        processors.ExceptionPrettyPrinter(),
        processors.CallsiteParameterAdder(
            {
                processors.CallsiteParameter.PATHNAME,
                processors.CallsiteParameter.FUNC_NAME,
                processors.CallsiteParameter.LINENO,
            }
        ),
        stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)
